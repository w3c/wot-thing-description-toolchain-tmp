id: https://www.w3.org/2019/wot/hypermedia
name: hypermedia
title: Hypermedia Controls Ontology
description: >-
  LinkML schema for modelling the TD Hypermedia Control information model, in particular links and forms.
version: "1.1-2-June-2025"
license: MIT
contributors: Mahda_Noura
see_also:
  - https://www.w3.org/TR/wot-thing-description11/#sec-hypermedia-vocabulary-definition
prefixes:
  hctl: https://www.w3.org/2019/wot/hypermedia#
  linkml: https://w3id.org/linkml/
  xsd: http://www.w3.org/2001/XMLSchema#
  schema: http://schema.org/
  td: https://www.w3.org/2019/wot/td#
  bcp47: https://tools.ietf.org/html/bcp47
  tm: https://www.w3.org/2019/wot/tm#

imports:
  - linkml:types

types:
  bcp47_language_tag:
    typeof: string
    description: A language tag as defined in BCP47
    pattern: "^[a-zA-Z]{2,3}(-[a-zA-Z]{3}(-[a-zA-Z]{3}){0,2})?$"

enums:
  OperationType:
    description: >-
      Well-known operation types for WoT interaction model. The list of possible operation types of a form is fixed. 
      As of this version of the specification, it only includes the well-known types necessary to implement the WoT 
      interaction model.
    comments:
      - Consumer to Thing applies for messages sent by the Consumer to the Thing
      - Thing to Consumer applies for messages sent by the Thing to the Consumer
      - No correlation implies no payload is required or expected
    permissible_values:
      readproperty:
        description: Identifies the read operation on Property Affordances to retrieve the corresponding data
        comments:
          - Thing to Consumer - All fields in the Property Affordance without "writeOnly":true
          - Consumer to Thing - No correlation
      writeproperty:
        description: Identifies the write operation on Property Affordances to update the corresponding data
        comments:
          - Consumer to Thing - All fields in the Property Affordance without "readOnly":true
          - Thing to Consumer - No correlation, additionalResponses can be used in the form level
      observeproperty:
        description: >-
          Identifies the observe operation on Property Affordances to be notified with the new data when the 
          Property is updated
        comments:
          - Thing to Consumer - All fields in the Property Affordance without "writeOnly":true
          - Consumer to Thing - No correlation
      unobserveproperty:
        description: Identifies the unobserve operation on Property Affordances to stop the corresponding notifications
        comments:
          - No payload correlation in either direction
      invokeaction:
        description: Identifies the invoke operation on Action Affordances to perform the corresponding action
        comments:
          - Consumer to Thing - Value of the input key
          - Thing to Consumer - Value of the output key
      queryaction:
        description: Identifies the querying operation on Action Affordances to get the status of the corresponding action
        comments:
          - No correlation, additionalResponses can be used in the form level
      cancelaction:
        description: Identifies the cancel operation on Action Affordances to cancel the ongoing corresponding action
        comments:
          - No correlation, additionalResponses can be used in the form level
      subscribeevent:
        description: >-
          Identifies the subscribe operation on Event Affordances to be notified by the Thing when the event occurs
        comments:
          - Consumer to Thing - Value of the subscription key with all fields without "readOnly":true
          - Thing to Consumer - Value of the subscription key with all fields without "writeOnly":true
      unsubscribeevent:
        description: Identifies the unsubscribe operation on Event Affordances to stop the corresponding notifications
        comments:
          - Consumer to Thing - Value of the subscription key with all fields without "readOnly":true
          - Thing to Consumer - Value of the subscription key with all fields without "writeOnly":true
      readallproperties:
        description: >-
          Identifies the readallproperties operation on a Thing to retrieve the data of all Properties in a 
          single interaction
      writeallproperties:
        description: >-
          Identifies the writeallproperties operation on a Thing to update the data of all writable Properties 
          in a single interaction
      readmultipleproperties:
        description: >-
          Identifies the readmultipleproperties operation on a Thing to retrieve the data of selected Properties 
          in a single interaction
      writemultipleproperties:
        description: >-
          Identifies the writemultipleproperties operation on a Thing to update the data of selected writable 
          Properties in a single interaction
      observeallproperties:
        description: >-
          Identifies the observeallproperties operation on Properties to be notified with new data when any 
          Property is updated
      unobserveallproperties:
        description: >-
          Identifies the unobserveallproperties operation on Properties to stop notifications from all Properties 
          in a single interaction
      queryallactions:
        description: >-
          Identifies the queryallactions operation on a Thing to get the status of all Actions in a single interaction
      subscribeallevents:
        description: >-
          Identifies the subscribeallevents operation on Events to subscribe to notifications from all Events in 
          a single interaction
      unsubscribeallevents:
        description: >-
          Identifies the unsubscribeallevents operation on Events to unsubscribe from notifications from all Events 
          in a single interaction

classes:
  Link:
    class_uri: hctl:Link
    description: >-
      A link can be viewed as a statement of the form "link context has a relation type resource at link target", 
      where the optional target attributes may further describe the resource.
    attributes:
      href:
        description: Target IRI of a link or submission target of a form.
        slot_uri: hctl:hasTarget
        range: uri
        required: true
      type:
        description: >-
          Target attribute providing a hint indicating what the media type [RFC2046] of the result of 
          dereferencing the link should be.
        slot_uri: hctl:hintsAtMediaType
        range: string
      rel:
        description: A link relation type identifies the semantics of a link.
        slot_uri: hctl:hasRelationType
        range: string
        comments:
          - Recommended to use IANA Link Relations when possible
      anchor:
        description: >-
          Overrides the link context (by default the Thing itself identified by its id) with the given URI or IRI.
        slot_uri: hctl:hasAnchor
        range: uri
      sizes:
        description: >-
          Target attribute that specifies one or more sizes for the referenced icon. Only applicable for relation 
          type "icon". The value pattern follows {Height}x{Width} (e.g., "16x16", "16x16 32x32").
        slot_uri: hctl:hasSizes
        range: string
        pattern: "^(\\d+x\\d+)(\\s+\\d+x\\d+)*$"
      hreflang:
        description: >-
          The hreflang attribute specifies the language of a linked document. The value of this must be a valid 
          language tag [BCP47].
        slot_uri: hctl:hasHreflang
        exactly_one_of:
          - range: bcp47_language_tag
          - range: bcp47_language_tag
            multivalued: true
        comments:
          - The hreflang attribute is allowed to be a string or array in this version of the spec

  Form:
    class_uri: hctl:Form
    description: >-
      A form can be viewed as a statement of "To perform an operation type operation on form context, make a 
      request method request to submission target" where the optional form fields may further describe the required 
      request. In Thing Descriptions, the form context is the surrounding Object, such as Properties, Actions, and 
      Events or the Thing itself for meta-interactions.
    comments:
      - >-
        If no response name-value pair is provided, it MUST be assumed that the content type of the response 
        is equal to the content type assigned to the Form instance
      - >-
        If the content type of the expected response differs from the content type of the form, the Form instance 
        MUST include a name-value pair with the name response
    attributes:
      href:
        description: Target IRI of a link or submission target of a form.
        slot_uri: hctl:hasTarget
        range: uri
        required: true
      contentType:
        description: >-
          Assign a content type based on a media type (e.g., text/plain) and potential parameters 
          (e.g., charset=utf-8) for the media type [RFC2046].
        slot_uri: hctl:forContentType
        range: string
      contentCoding:
        description: >-
          Content coding values indicate an encoding transformation that has been or can be applied to a 
          representation. Content codings are primarily used to allow a representation to be compressed or 
          otherwise usefully transformed without losing the identity of its underlying media type and without 
          loss of information. Examples of content coding include "gzip", "deflate", etc.
        slot_uri: hctl:forContentCoding
        range: string
      security:
        description: >-
          Set of security definition names, chosen from those defined in securityDefinitions. These must all be 
          satisfied for access to resources.
        range: string
        multivalued: true
      scopes:
        description: >-
          Set of authorization scope identifiers provided as an array. These are provided in tokens returned by 
          an authorization server and associated with forms in order to identify what resources a client may 
          access and how. The values associated with a form SHOULD be chosen from those defined in an 
          OAuth2SecurityScheme active on that form.
        range: string
        multivalued: true
      response:
        description: >-
          This optional term can be used if, e.g., the output communication metadata differ from input metadata 
          (e.g., output contentType differ from the input contentType). The response name contains metadata that 
          is only valid for the primary response messages.
        slot_uri: hctl:returns
        range: ExpectedResponse
      additionalResponses:
        description: >-
          This optional term can be used if additional expected responses are possible, e.g. for error reporting.
          Each additional response needs to be distinguished from others in some way (for example, by specifying
          a protocol-specific error code), and may also have its own data schema.
        slot_uri: hctl:additionalReturns
        range: AdditionalExpectedResponse
        multivalued: true
      subprotocol:
        description: >-
          Indicates the exact mechanism by which an interaction will be accomplished for a given protocol when 
          there are multiple options. For example, for HTTP and Events, it indicates which of several available 
          mechanisms should be used for asynchronous notifications such as long polling, WebSub, Server-Sent Events (also known as EventSource).
        slot_uri: hctl:forSubProtocol
        range: string
        comments:
          - e.g., longpoll, websub, or sse
      op:
        description: >-
          Indicates the semantic intention of performing the operation(s) described by the form. For example, 
          the Property interaction allows get and set operations. The protocol binding may contain a form for 
          the get operation and a different form for the set operation. The op attribute indicates which form 
          is for which and allows the client to select the correct form for the operation required.
        slot_uri: hctl:hasOperationType
        exactly_one_of:
          - range: OperationType
          - range: OperationType
            multivalued: true

  ExpectedResponse:
    class_uri: hctl:ExpectedResponse
    description: Communication metadata describing the expected response message for the primary response.
    attributes:
      contentType:
        description: >-
          Assign a content type based on a media type (e.g., text/plain) and potential parameters 
          (e.g., charset=utf-8) for the media type [RFC2046].
        slot_uri: hctl:forContentType
        range: string
        required: true

  AdditionalExpectedResponse:
    class_uri: hctl:AdditionalExpectedResponse
    description: Communication metadata describing the expected response message for additional responses.
    attributes:
      success:
        description: Signals if an additional response should not be considered an error.
        slot_uri: hctl:isSuccess
        range: boolean
      contentType:
        description: >-
          Assign a content type based on a media type (e.g., text/plain) and potential parameters 
          (e.g., charset=utf-8) for the media type [RFC2046].
        slot_uri: hctl:forContentType
        range: string
      schema:
        description: >-
          Used to define the output data schema for an additional response if it differs from the default 
          output data schema. Rather than a DataSchema object, the name of a previous definition given in a 
          schemaDefinitions map must be used.
        slot_uri: hctl:hasAdditionalOutputSchema
        range: string 