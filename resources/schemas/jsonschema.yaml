id: https://www.w3.org/2019/wot/json-schema
name: jsonschema
title: JSON Schema in RDF
description: >-
  LinkML schema for modelling the TD module for data schema specifications. A data schema is an abstract notation for data contained in data formats. The data schema vocabulary definition 
  reflects a very common subset of the terms defined by JSON Schema.
version: "1.1-2-June-2025"
license: MIT
contributors: Mahda_Noura
see_also:
  - https://www.w3.org/TR/wot-thing-description11/#sec-data-schema-vocabulary-definition

prefixes:
  jsonschema: https://www.w3.org/2019/wot/json-schema#
  linkml: https://w3id.org/linkml/
  xsd: http://www.w3.org/2001/XMLSchema#
  schema: http://schema.org/
  owl: http://www.w3.org/2002/07/owl#
  td: https://www.w3.org/2019/wot/td#

imports:
  - linkml:types

types:
  NonNegativeInteger:
    typeof: integer
    minimum_value: 0
    uri: xsd:nonNegativeInteger

  Decimal:
    typeof: float
    uri: xsd:decimal

enums:
  DataSchemaType:
    description: Assignment of JSON-based data types compatible with JSON Schema
    permissible_values:
      object:
        description: Represents an object type
      array:
        description: Represents an array type
      string:
        description: Represents a string type
      number:
        description: Represents a number type
      integer:
        description: Represents an integer type
      boolean:
        description: Represents a boolean type
      "null":
        description: Represents a null type

classes:
  MultiLanguage:
    description: >-
      A Map providing a set of human-readable texts in different languages identified by language tags as defined in BCP47.
    attributes:
      language_map:
        range: string
        multivalued: true
        pattern: "^[a-zA-Z]{2,3}(-[a-zA-Z]{3}(-[a-zA-Z]{3}){0,2})?$"

  DataSchema:
    class_uri: jsonschema:DataSchema
    description: Metadata that describes the data format used. It can be used for validation.
    attributes:
      "@type":
        description: >-
          JSON-LD keyword to label the object with semantic tags (or types).
        exactly_one_of:
          - range: string
          - range: string
            multivalued: true
      title:
        description: Provides a human-readable title (e.g., display a text for UI representation) based on a default language
        range: string
      titles:
        description: >-
          Provides multi-language human-readable titles (e.g., display a text for UI representation in different languages)
        range: MultiLanguage
      description:
        description: Provides additional (human-readable) information based on a default language
        range: string
      descriptions:
        description: Can be used to support (human-readable) information in different languages
        range: MultiLanguage
      const:
        slot_uri: jsonschema:const
        description: Provides a constant value
        range: string
      default:
        slot_uri: jsonschema:default
        description: Supply a default value. The value SHOULD validate against the data schema in which it resides
        range: string
      unit:
        description: >-
          Provides unit information that is used, e.g., in international science, engineering, and business. 
          To preserve uniqueness, it is recommended that the value of the unit points to a semantic definition
        range: string
      enum:
        slot_uri: jsonschema:enum
        description: Restricted set of values provided as an array
        range: string
        multivalued: true
      readOnly:
        slot_uri: jsonschema:readOnly
        description: Boolean value that is a hint to indicate whether a property interaction / value is read only (=true) or not (=false)
        range: boolean
      writeOnly:
        slot_uri: jsonschema:writeOnly
        description: Boolean value that is a hint to indicate whether a property interaction / value is write only (=true) or not (=false)
        range: boolean
      type:
        description: >-
          Assignment of JSON-based data types compatible with JSON Schema (one of boolean, integer, number, string, 
          object, array, or null)
        range: DataSchemaType
      oneOf:
        slot_uri: jsonschema:oneOf
        description: >-
          Used to ensure that the data is valid against one of the specified schemas in the array. 
          This can be used to describe multiple input or output schemas
        range: DataSchema
        multivalued: true
      allOf:
        slot_uri: jsonschema:allOf
        description: Used to ensure that the data is valid against all of the specified schemas in the array
        range: DataSchema
        multivalued: true
      anyOf:
        slot_uri: jsonschema:anyOf
        description: Used to ensure that the data is valid against any of the specified schemas in the array
        range: DataSchema
        multivalued: true

  ArraySchema:
    class_uri: jsonschema:ArraySchema
    is_a: DataSchema
    description: >-
      Metadata describing data of type array. This subclass is indicated by the value array assigned to type in 
      DataSchema instances.
    attributes:
      items:
        slot_uri: jsonschema:items
        description: Used to define the characteristics of an array
        range: DataSchema
      minItems:
        slot_uri: jsonschema:minItems
        description: Defines the minimum number of items that have to be in the array
        range: NonNegativeInteger
      maxItems:
        slot_uri: jsonschema:maxItems
        description: Defines the maximum number of items that have to be in the array
        range: NonNegativeInteger

  BooleanSchema:
    class_uri: jsonschema:BooleanSchema
    is_a: DataSchema
    description: >-
      Metadata describing data of type boolean. This subclass is indicated by the value boolean assigned to type in 
      DataSchema instances.

  NumberSchema:
    class_uri: jsonschema:NumberSchema
    is_a: DataSchema
    description: >-
      Metadata describing data of type number. This subclass is indicated by the value number assigned to type in 
      DataSchema instances.
    attributes:
      minimum:
        slot_uri: jsonschema:minimum
        description: >-
          Specifies a minimum numeric value, representing an inclusive lower limit. 
          Only applicable for associated number or integer types
        range: Decimal
      maximum:
        slot_uri: jsonschema:maximum
        description: >-
          Specifies a maximum numeric value, representing an inclusive upper limit. 
          Only applicable for associated number or integer types
        range: Decimal
      exclusiveMinimum:
        slot_uri: jsonschema:exclusiveMinimum
        description: >-
          Specifies a minimum numeric value, representing an exclusive lower limit. 
          Only applicable for associated number or integer types
        range: Decimal
      exclusiveMaximum:
        slot_uri: jsonschema:exclusiveMaximum
        description: >-
          Specifies a maximum numeric value, representing an exclusive upper limit. 
          Only applicable for associated number or integer types
        range: Decimal
      multipleOf:
        slot_uri: jsonschema:multipleOf
        description: >-
          Specifies the multipleOf value number. The value must strictly greater than 0. 
          Only applicable for associated number or integer types
        range: Decimal
        pattern: '^(0*[1-9][0-9]*(\\.[0-9]+)?|0+\\.[0-9]*[1-9][0-9]*)$'  # Matches any positive decimal number

  IntegerSchema:
    class_uri: jsonschema:IntegerSchema
    is_a: NumberSchema
    description: >-
      Metadata describing data of type integer. This subclass is indicated by the value integer assigned to type in 
      DataSchema instances.
    slot_usage:
      minimum:
        range: integer
      maximum:
        range: integer
      exclusiveMinimum:
        range: integer
      exclusiveMaximum:
        range: integer
      multipleOf:
        range: integer

  ObjectSchema:
    class_uri: jsonschema:ObjectSchema
    is_a: DataSchema
    description: >-
      Metadata describing data of type object. This subclass is indicated by the value object assigned to type in 
      DataSchema instances.
    attributes:
      properties:
        slot_uri: jsonschema:properties
        description: Data schema nested definitions
        range: DataSchema
        multivalued: true
      required:
        slot_uri: jsonschema:required
        description: >-
          Defines which members of the object type are mandatory, i.e. which members are mandatory in the payload 
          that is to be sent and what members will be definitely delivered in the payload that is being received
        range: string
        multivalued: true

  StringSchema:
    class_uri: jsonschema:StringSchema
    is_a: DataSchema
    description: >-
      Metadata describing data of type string. This subclass is indicated by the value string assigned to type in 
      DataSchema instances.
    attributes:
      minLength:
        slot_uri: jsonschema:minLength
        description: Specifies the minimum length of a string. Only applicable for associated string types
        range: NonNegativeInteger
      maxLength:
        slot_uri: jsonschema:maxLength
        description: Specifies the maximum length of a string. Only applicable for associated string types
        range: NonNegativeInteger
      pattern:
        slot_uri: jsonschema:pattern
        description: >-
          Provides a regular expression to express constraints of the string value. 
          The regular expression must follow the ECMA 262 dialect
        range: string
      contentEncoding:
        slot_uri: jsonschema:contentEncoding
        description: >-
          Specifies the encoding used to store the contents, as specified in RFC 2045 (Section 6.1) and RFC 4648
        range: string
        comments:
          - e.g., 7bit, 8bit, binary, quoted-printable, base16, base32, or base64
      contentMediaType:
        slot_uri: jsonschema:contentMediaType
        description: Specifies the MIME type of the contents of a string value, as described in RFC 2046
        range: string
        comments:
          - e.g., image/png, or audio/mpeg

  NullSchema:
    class_uri: jsonschema:NullSchema
    is_a: DataSchema
    description: >-
      Metadata describing data of type null. This subclass is indicated by the value null assigned to type in 
      DataSchema instances. This Subclass describes only one acceptable value, namely null. It is important to note 
      that null does not mean the absence of a value. It is analogous to null in JavaScript, None in Python, null 
      in Java and nil in Ruby programming languages. It can be used as part of a oneOf declaration, where it is 
      used to indicate, that the data can also be null. 

slots:
  minimum:
    description: >-
      Specifies a minimum numeric value, representing an inclusive lower limit. 
      Only applicable for associated number or integer types.
    range: Decimal

  maximum:
    description: >-
      Specifies a maximum numeric value, representing an inclusive upper limit. 
      Only applicable for associated number or integer types.
    range: Decimal

  exclusiveMinimum:
    description: >-
      Specifies a minimum numeric value, representing an exclusive lower limit. 
      Only applicable for associated number or integer types.
    range: Decimal

  exclusiveMaximum:
    description: >-
      Specifies a maximum numeric value, representing an exclusive upper limit. 
      Only applicable for associated number or integer types.
    range: Decimal

  multipleOf:
    description: >-
      Specifies the multipleOf value number. The value must strictly greater than 0. 
      Only applicable for associated number or integer types.
    range: Decimal
    pattern: '^(0*[1-9][0-9]*(\.[0-9]+)?|0+\.[0-9]*[1-9][0-9]*)$'  # Matches any positive decimal number 